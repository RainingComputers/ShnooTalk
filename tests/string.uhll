use "math.uhll" as math
use "result.uhll" as result
from result use Result, FloatResult

# Library for handling string

struct String
{
    var arr:char[80]
}

fn isDigit(c:char) -> bool 
{
    # Chaeck if char is digit or not

    if(c >= '0' and c <= '9') return true
    
    return false
}

fn len(this:String) -> int
{
    # Return length of string

    for(var i:int = 0; i < 80; i += 1)
        if(this.arr[i] == '\0') return i 
        
    return 80
}

fn copy(mut this:String, arr:char[80])
{
    # Copy int array into struct

    for(var i:int = 0; arr[i] != 0 and i < 79; i += 1)
        this.arr[i] = arr[i]
    
    # Make sure string terminates with '\0'
    this.arr[i] = '\0'
}

fn copyChar(mut this:String, c:char)
{
    # Copy char into string
    
    this.arr[0] = c
    this.arr[1] = '\0'
    
}

fn cat(this:String, arr:char[80]) -> String
{
    # Return new string with concatination

    # Crate a new string to hold the result
    var newstr:String
    newstr.copy(this.arr)
    
    # Copy at the end of new string
    const l:int = this.len()

    for(var i:int = 0; arr[i] != '\0' and i + l < 79; i += 1)
        newstr.arr[i + l] = arr[i]
    
    # Make sure string terminates with '\0'
    newstr.arr[i + l] = '\0'
    
    return newstr
}

fn find(this:String, start:int, c:char) -> Result
{
    # Returns index of char

    const l:int = this.len()
    
    for(var i:int = start; i < l; i += 1)
        # If char is found return a success result
        if(this.arr[i] == c) return result::success(i)

    
    # If char is not found, return failure
    return result::fail()
}

fn integer(this:String) -> Result
{
    # Parses string to int

    var pow:int = 1
    var parsed_int:int = 0

    for(var i:int = this.len() - 1; i >= 0; i -= 1)
    {
        # Check if char is valid digit
        if (isDigit(this.arr[i]) != true) return result::fail()
        
        # If valid digit, add to string
        parsed_int += pow * int`(this.arr[i] - '0')
        pow *= 10   
    }

    return result::success(parsed_int)
}

fn floating(this:String) -> FloatResult
{
    # Parses string to float

    const l:int = this.len()
    var dot:int
    
    # Check if '.' exist, if yes get its index
    const dotidx:Result = this.find(0, '.')
    if(dotidx.err == true) dot = l 
    else dot = dotidx.val() 
    
    # Parse string to float
    var pow:float = 1.0/float`math::pow(10, (l - dot - 1))
    var parsed_float:float = 0.0
    
    for(var i:int = l - 1; i >= 0; i -= 1)
    {
        if(i == dot) continue
        
        # Check if valid digit
        if (isDigit(this.arr[i]) != true) return result::floatFail() 
        
        parsed_float += pow * float`(this.arr[i] - '0')
        pow *= 10.0   
    }

    return result::floatSuccess(parsed_float)
}

fn subString(this:String, startidx:int, endidx:int) -> String
{
    # Returns substring

    var newstr:String
    
    for(var i:int = 0; i < endidx - startidx and i < 79; i += 1)
        newstr.arr[i] = this.arr[i + startidx] 

    newstr.arr[i] = 0
    
    return newstr

}

fn strcmp(this:String, arr:char[80]) -> int
{
    var i:int = 0

    while(1 == 1)
    {
        if(this.arr[i] == '\0' and arr[i] == '\0') return 0
        if(this.arr[i] < arr[i]) return -1
        if(this.arr[i] > arr[i]) return 1
        i += 1
    }

    return -1
}

