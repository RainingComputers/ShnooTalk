{
    "moduleName": "ReturnConditionalExpression.shtk",
    "uses": [],
    "aliases": {
    },
    "enumerations": {
    },
    "intDefines": {
        "false": 0,
        "true": 1
    },
    "floatDefines": {
        "infinity": inf,
        "nan": nan
    },
    "stringDefines": {
    },
    "stringsDataCharCounts": {
    },
    "globals": {
    },
    "structures": {
    },
    "externFunctions": {
    },
    "functions": {
        "_fn_ReturnConditionalExpression_shtk_isSingleDigitNumber": {
            "moduleName": "ReturnConditionalExpression.shtk",
            "parameters": ["a"],
            "functionReturnType": {"dtype": "byte", "dtypeSize": 1, "size": 1, "moduleName": "ReturnConditionalExpression.shtk", "offset": 0, "dimensions": [], "properties": []},
            "symbols": {
                "a": {"dtype": "int", "dtypeSize": 4, "size": 4, "moduleName": "ReturnConditionalExpression.shtk", "offset": 0, "dimensions": [], "properties": ["isParameter"]}
            }
            "icode": [
                    autoInt* tempPtr4 = allocPointer 
                    int temp12 = cast autoInt 0
                    flag = greaterThanOrEqualTo int a, int temp12
                    if(not flag) goto _condn_exp_false_l8_c11
                    int temp15 = cast autoInt 9
                    flag = lessThanOrEqualTo int a, int temp15
                    if(not flag) goto _condn_exp_false_l8_c11
                    autoInt* tempPtr4 = write autoInt 1
                    goto _condn_exp_end_false_l8_c11
                _condn_exp_false_l8_c11:
                    autoInt* tempPtr4 = write autoInt 0
                _condn_exp_end_false_l8_c11:
                    autoInt temp18 = read autoInt* tempPtr4
                    byte temp19 = cast autoInt temp18
                    byte returnValue3 = equal byte temp19
                    return
            ]
        },
        "main": {
            "moduleName": "ReturnConditionalExpression.shtk",
            "parameters": [],
            "functionReturnType": {"dtype": "int", "dtypeSize": 4, "size": 4, "moduleName": "ReturnConditionalExpression.shtk", "offset": 0, "dimensions": [], "properties": []},
            "symbols": {
            }
            "icode": [
                    int temp25 = cast autoInt 4
                    pass int temp25, byte _fn_ReturnConditionalExpression_shtk_isSingleDigitNumber, module ReturnConditionalExpression.shtk
                    byte calleeReturnValue28 = call byte _fn_ReturnConditionalExpression_shtk_isSingleDigitNumber, module ReturnConditionalExpression.shtk
                    print byte calleeReturnValue28
                    newLine
                    int temp33 = cast autoInt 10
                    pass int temp33, byte _fn_ReturnConditionalExpression_shtk_isSingleDigitNumber, module ReturnConditionalExpression.shtk
                    byte calleeReturnValue36 = call byte _fn_ReturnConditionalExpression_shtk_isSingleDigitNumber, module ReturnConditionalExpression.shtk
                    print byte calleeReturnValue36
                    newLine
                    int temp41 = cast autoInt 6
                    pass int temp41, byte _fn_ReturnConditionalExpression_shtk_isSingleDigitNumber, module ReturnConditionalExpression.shtk
                    byte calleeReturnValue44 = call byte _fn_ReturnConditionalExpression_shtk_isSingleDigitNumber, module ReturnConditionalExpression.shtk
                    print byte calleeReturnValue44
                    newLine
                    int temp49 = cast autoInt 100
                    pass int temp49, byte _fn_ReturnConditionalExpression_shtk_isSingleDigitNumber, module ReturnConditionalExpression.shtk
                    byte calleeReturnValue52 = call byte _fn_ReturnConditionalExpression_shtk_isSingleDigitNumber, module ReturnConditionalExpression.shtk
                    print byte calleeReturnValue52
                    newLine
                    int temp57 = cast autoInt 0
                    int returnValue55 = equal int temp57
                    return
            ]
        }
    }
}