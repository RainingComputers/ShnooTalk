extfn sqrtf(num: float) -> float

struct Vec 
{
    var x:int, y:int
}

fn setVec(mut this:Vec, x:int, y:int)
{
    this.x = x 
    this.y = y
}

fn add(this:Vec, other:Vec) -> Vec
{    
    var res:Vec

    res.x = this.x + other.x
    res.y = this.y + other.y

    return res
}

fn greaterThan(this: Vec, other: Vec) -> bool
{
    var thisLen: float = sqrtf(float`(this.x*this.x + this.y*this.y))
    var otherLen: float = sqrtf(float`(other.x*other.x + other.y*other.y))

    return thisLen > otherLen
}

fn dot(this:Vec, other:Vec) -> int 
{
    return this.x * other.x + this.y * other.y
}

fn printVec(vector:Vec)
{
    println("x:", vector.x, "y:", vector.y)
}

fn isUnitVector(vector:Vec) -> bool
{
    if(vector.x == 1 and vector.y == 1)
        return true

    return false
}
