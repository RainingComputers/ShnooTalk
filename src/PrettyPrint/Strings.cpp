#include "Strings.hpp"

const std::string tokenTypeToString[] = { "NONE",
                                          "SPACE",
                                          "FUNCTION",
                                          "IDENTIFIER",
                                          "LPAREN",
                                          "RPAREN",
                                          "STRUCT",
                                          "ENUM",
                                          "DEF",
                                          "BEGIN",
                                          "END",
                                          "COLON",
                                          "DOUBLE_COLON",
                                          "COMMA",
                                          "DOT",
                                          "VAR",
                                          "CONST",
                                          "STR_LITERAL",
                                          "CHAR_LITERAL",
                                          "INT_LITERAL",
                                          "HEX_LITERAL",
                                          "BIN_LITERAL",
                                          "FLOAT_LITERAL",
                                          "IF",
                                          "ELSEIF",
                                          "ELSE",
                                          "WHILE",
                                          "FOR",
                                          "BREAK",
                                          "CONTINUE",
                                          "RETURN",
                                          "VOID",
                                          "EQUAL",
                                          "PLUS_EQUAL",
                                          "MINUS_EQUAL",
                                          "DIVIDE_EQUAL",
                                          "MULTIPLY_EQUAL",
                                          "OR_EQUAL",
                                          "AND_EQUAL",
                                          "XOR_EQUAL",
                                          "NOT",
                                          "CONDN_NOT",
                                          "CAST",
                                          "OPEN_SQAURE",
                                          "CLOSE_SQUARE",
                                          "OPEN_BRACE",
                                          "CLOSE_BRACE",
                                          "RIGHT_ARROW",
                                          "PLUS",
                                          "MINUS",
                                          "BITWISE_OR",
                                          "BITWISE_XOR",
                                          "RIGHT_SHIFT",
                                          "LEFT_SHIFT",
                                          "CONDN_OR",
                                          "GREATER_THAN",
                                          "LESS_THAN",
                                          "GREATER_THAN_EQUAL",
                                          "LESS_THAN_EQUAL",
                                          "CONDN_EQUAL",
                                          "CONDN_NOT_EQUAL",
                                          "MULTIPLY",
                                          "DIVIDE",
                                          "MOD",
                                          "BITWISE_AND",
                                          "CONDN_AND",
                                          "USE",
                                          "FROM",
                                          "MUTABLE",
                                          "SEMICOLON",
                                          "END_OF_LINE",
                                          "END_OF_FILE",
                                          "INVALID",
                                          "SIZEOF",
                                          "TYPEOF",
                                          "PRINT",
                                          "PRINTLN",
                                          "INPUT",
                                          "EXIT" };

const std::string nodeTypeToString[] = { "PROGRAM",    "USE",         "FROM",       "BLOCK",      "MODULE",
                                         "FUNCTION",   "STRUCT",      "ENUM",       "DEF",        "VAR",
                                         "CONST",      "IF",          "ELSEIF",     "ELSE",       "WHILE",
                                         "FOR",        "CAST",        "BREAK",      "CONTINUE",   "ASSIGNMENT",
                                         "RETURN",     "FUNCCALL",    "METHODCALL", "PARAM",      "MUT_PARAM",
                                         "EXPRESSION", "STR_LITERAL", "LITERAL",    "IDENTIFIER", "ASSIGN_OPERATOR",
                                         "OPERATOR",   "UNARY_OPR",   "SUBSCRIPT",  "STRUCT_VAR", "INITLIST",
                                         "TERM",       "SIZEOF",      "TYPEOF",     "PRINT",      "PRINTLN",
                                         "INPUT",      "EXIT" };

const std::string instructionToString[] = {
    "PASS",         "PASS_ADDR",  "CALL",      "RET",         "ADDR_ADD", "ADDR_MUL", "EQUAL",        "READ",
    "WRITE",        "CREATE_PTR", "CAST",      "UNARY_MINUS", "NOT",      "MUL",      "DIV",          "MOD",
    "ADD",          "SUB",        "RSH",       "LSH",         "LT",       "LTE",      "GT",           "GTE",
    "EQ",           "NEQ",        "BWA",       "BWX",         "BWO",      "GOTO",     "IF_TRUE_GOTO", "IF_FALSE_GOTO",
    "CREATE_LABEL", "PRINT",      "PRINT_STR", "SPACE",       "NEWLN",    "INPUT",    "INPUT_STR",    "MEMCPY",
    "EXIT"
};