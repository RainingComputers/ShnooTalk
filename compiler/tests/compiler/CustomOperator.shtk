extfn sqrtf(num: float) -> float

struct Foobar
{
    var x: int, y: float
}

fn createFoo(x: int, y: float) -> Foobar
{
    var res: Foobar
    res.x = x
    res.y = y
    return res
}

fn printFoo(foo: Foobar)
{
    println("x="; foo.x, "y="; foo.y)
}

fn __multiply__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x*RHS.x, LHS.y*RHS.y)
}

fn __divide__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x/RHS.x, LHS.y/RHS.y)
}

fn __mod__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x%RHS.x, LHS.y%RHS.y)
}

fn __add__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x+RHS.x, LHS.y+RHS.y)
}

fn __subtract__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x-RHS.x, LHS.y-RHS.y)
}

fn __rightShift__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x>>RHS.x, LHS.y-RHS.y)
}

fn __leftShift__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x<<RHS.x, LHS.y+RHS.y)
}

fn __bitwiseAnd__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x&RHS.x, LHS.y-RHS.y)
}

fn __bitwiseOr__(LHS: Foobar, RHS: Foobar) -> Foobar
{
    return createFoo(LHS.x|RHS.x, LHS.y+RHS.y)
}

fn __bitwiseOrInteger__(LHS: Foobar, RHS: int) -> Foobar
{
    return createFoo(LHS.x|RHS, LHS.y+float`RHS)
}

fn __isEqual__(LHS: Foobar, RHS: Foobar) -> bool
{
    return LHS.x == RHS.x and LHS.y == RHS.y
}

fn __isNotEqual__(LHS: Foobar, RHS: Foobar) -> bool
{
    return LHS.x != RHS.x or LHS.y != RHS.y
}

fn __greaterThan__(LHS: Foobar, RHS: Foobar) -> bool
{
    var LHSLen: float = sqrtf(float`(LHS.x*LHS.x) + LHS.y*LHS.y)
    var RHSLen: float = sqrtf(float`(RHS.x*RHS.x) + RHS.y*RHS.y)

    return LHSLen > RHSLen
}

fn __greaterThanOrEqual__(LHS: Foobar, RHS: Foobar) -> bool
{
    return LHS == RHS or LHS > RHS
}

fn __lessThan__(LHS: Foobar, RHS: Foobar) -> bool
{
    var LHSLen: float = sqrtf(float`(LHS.x*LHS.x) + LHS.y*LHS.y)
    var RHSLen: float = sqrtf(float`(RHS.x*RHS.x) + RHS.y*RHS.y)

    return LHSLen < RHSLen
}

fn __lessThanOrEqual__(LHS: Foobar, RHS: Foobar) -> bool
{
    return not (LHS > RHS)
}

fn main() -> int
{
    var a: Foobar = createFoo(1, 1.0)
    var b: Foobar = createFoo(2, 2.0)

    printFoo(a*b)
    printFoo(a/b)
    printFoo(a%b)
    printFoo(a+b)
    printFoo(a-b)
    printFoo(a>>b)
    printFoo(a<<b)
    printFoo(a&b)
    printFoo(a|b)
    println(a==b)
    println(a!=b)
    println(a>b)
    println(a>=b)
    println(a<b)
    println(a<=b)
    printFoo(a|2)

    a += b
    printFoo(a)
    printFoo(b)

    a -= b
    printFoo(a)
    printFoo(b)

    a = createFoo(1, 1.0)
    b = createFoo(1, 1.0)

    println(a==b)

    return 0
}