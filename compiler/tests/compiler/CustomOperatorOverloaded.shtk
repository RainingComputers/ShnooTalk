extfn sqrt(n: double)

struct Vector
{
    var x: int, y: int, z: int
}

fn createVector(x: int, y: int, z: int) -> Vector
{
    var v: Vector
    v.x = x
    v.y = y
    v.z = z
    return v
}

fn addVector(self: Vector, other: Vector) -> Vector
{
    return createVector(self.x+other.x, self.y+other.y, self.z+other.z)
}

fn addVectorArray(self: Vector, arr: int[], n: int) -> Vector
{
    if n == 2
        return createVector(self.x+arr[0], self.y+arr[1], 0)

    if n > 2 
        return createVector(self.x+arr[0], self.y+arr[1], self.z+arr[2])

    return self
}

fn isEqualArray(self: Vector, arr: int[], n: int) -> bool 
{
    if n == 2
        return self.x == arr[0] and self.y == arr[1] and self.z == 0

    if n == 3
        return self.x == arr[0] and self.y == arr[1] and self.z == arr[2]

    return false
}

fn printVector(v: Vector)
{
    println(v.x, v.y, v.z)
}

fn main() -> int
{
    var a: Vector = createVector(1, 2, 3)
    var b: Vector = createVector(3, 2, 1)

    a += [1, 1, 1]

    printVector(a) # 2, 3, 4
    println(a == [2, 3, 4]) # 1

    a += b

    printVector(a) # 5, 5, 5
    println(a == [5, 5, 5]) # 1

    b = createVector(1, 1, 0)
    println(b == [1, 1]) # 1
    println(b == [4, 3]) # 0

    return 0
}