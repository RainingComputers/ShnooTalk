from "../stdlib/Result.shtk" use Result, ok, fail
from "../stdlib/Optional.shtk" use Optional, some

enum TestErrorEnum {TEST_ERROR_0, TEST_ERROR_1}

fn testQuestionMark(a: Result[int, TestErrorEnum]) -> Result[int, TestErrorEnum]
{
    const b := a?

    println(b)

    return ok(b)
}

fn testQuestionMarkOptional(a: Result[int, TestErrorEnum]) -> Optional[int]
{
    const b := a?

    println(b)

    return some(b)
}

fn main() -> int
{
    const a := ok[int, TestErrorEnum](10)
    println(a.hasValue())
    println(a.isFail())
    println(a.expect())
    println(a | 2)

    const [itemA, errA] := a
    println(itemA)

    const b := fail[int, TestErrorEnum](TEST_ERROR_1)
    println(b.hasValue())
    println(b.isFail())
    println(b | 100)

    const [itemB, errB] := b
    println(errB.get() == TEST_ERROR_1)

    const c := a | b
    println(c.hasValue())
    println(c.expect())

    const d := fail[int, TestErrorEnum](TEST_ERROR_0)
    const e := d | b
    const [itemE, errE] := e
    println(errE.get() == TEST_ERROR_0)

    println(testQuestionMark(a).isFail())
    println(testQuestionMark(b).isFail())

    println(testQuestionMarkOptional(a).isNone())
    println(testQuestionMarkOptional(b).isNone())

    return 0
}