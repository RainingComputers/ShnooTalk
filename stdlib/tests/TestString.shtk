from "stdlib/String.shtk" use string, String
from "stdlib/List.shtk" use List

fn testStringArgCoercion(str: String)
{
    println(str)
}

fn printStringList(list: List[String])
{
    for s in list print('\"'; s; '\"'; ", ")
    println("")
}

fn main() -> int
{
    const a := "Hello world".string()

    println(a.length())
    println(a)
    println(a[4])

    testStringArgCoercion("Coerce this to string type")

    println("isAlphaNumeric test")
    println("abcdef012334".string().isAlphaNumeric())
    println("abcde.f012334".string().isAlphaNumeric())
    println("abcde[f]012334".string().isAlphaNumeric())

    println("isSpace test")
    println("   \t\n".string().isSpace())
    println("   \t\n.".string().isSpace())

    println("isUpper test")
    println("ABCDEF".string().isUpper())
    println("ABcd".string().isUpper())

    println("isLower test")
    println("abcdef".string().isLower())
    println("ABcd".string().isLower())

    println("isInteger test")
    println("-1234".string().isInteger())
    println("2345".string().isInteger())
    println("12-23".string().isInteger())
    println("12.23".string().isInteger())

    println("isNumber test")
    println("5678".string().isNumber())
    println(".1234".string().isNumber())
    println("-.345".string().isNumber())
    println("23.45".string().isNumber())
    println("-23.45".string().isNumber())
    println("12..23".string().isNumber())
    println("-..345".string().isNumber())

    println("lower test")
    println("567aav[.]--0ABCD".string().lower())

    println("upper test")
    println("567AAV[.]--0abcd".string().upper())

    println("startsWith test")
    println("abcdef".string().startsWith("abc"))
    println("abcdef".string().startsWith("abcdefghijk"))
    println("abcdef".string().startsWith("def"))

    println("endsWith test")
    println("abcdef".string().endsWith("def"))
    println("abcdef".string().endsWith("cef"))
    println("abcdef".string().endsWith("abcdefghijk"))
    println("abcdef".string().endsWith("abc"))

    println("find test")
    println("abcdef".string().find("bcd", 0).expect())
    println("abcdef".string().find("def", 0).expect())
    println("abcdef".string().find("abh", 0).isNone())
    println("abcdef".string().find("abc", 0).expect())

    println("subString test")
    println("abcdef".string().subString([1, 4]).expect())
    const test := "abcdef".string()
    println(test[[1, 5]])

    println("strip test")
    println("   abcdef   ".string().strip())
    println("abcdef   ".string().strip())
    println("   abcdef".string().strip())
    println("a".string().strip())
    println(" a".string().strip())
    println("a ".string().strip())
    println("   a  ".string().strip())
    println(" ".string().strip())
    println("".string().strip())

    println("add test")
    const hello := "hello".string() + " world".string()
    println(hello)
    var hello2 := "hello".string()
    hello2 += " world".string()
    println(hello2)
    println("hello".string() + " world")

    println("relational operators")
    println("abcdef".string() > "bcdef".string())
    println("bcdef".string() > "abcdef".string())
    println("abcdef".string() < "bcdef".string())
    println("bcdef".string() < "abcdef".string())
    println("abcdef".string() == "bcdef".string())
    println("abcdef".string() != "bcdef".string())
    println("abcdef".string() >= "bcdef".string())
    println("hello".string() <= "hello".string())

    println("string parsing")
    println("12345".string().parseInt().expect())
    println("12345".string().parseLong().expect())
    println("12345".string().parseFloat().expect())
    println("12345".string().parseDouble().expect())
    println("123.45".string().parseFloat().expect())
    println("123.45".string().parseDouble().expect())

    println("string parsing errors")
    println("a34bcd".string().parseInt().hasValue())
    println("bcdef".string().parseLong().hasValue())
    println("abf".string().parseFloat().hasValue())
    println("123s45".string().parseDouble().hasValue())
    println("12f3.45".string().parseFloat().hasValue())
    println("123..45".string().parseDouble().hasValue())

    println("string in operator")
    println("bcd" in "abcdef".string())
    println('f' in "abcdef".string())
    println("def" in "abcdef".string())
    println("bcv" in "abcdef".string())
    println('r' in "abcdef".string())
    println("defg" in "abcdef".string())

    println("string split")
    printStringList("foobar".string().split(' '))
    printStringList("foo bar".string().split(' '))
    printStringList("foo    bar".string().split(' '))
    printStringList("   foo  bar  ".string().split(' '))
    printStringList("".string().split(' '))
    printStringList(" ".string().split(' '))

    var b := "Foo".string()
    b.setChar(1, 'Z')
    println(b)

    println("foobar".string().replace("foo", "FOO"))
    println("foobar".string().replace("oo", "OO"))
    println("foobar".string().replace("bar", "BAR"))
    println("This is a thing that is cool".string().replace("thing", "something"))
    println("testing multiple, testing multiple occurrences".string().replace("testing", "seeing"))

    return 0
}