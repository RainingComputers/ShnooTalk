use "../stdlib/OS.shtk" as os
from "../stdlib/String.shtk" use string

fn main(argc: int, argv: ulong[]) -> int
{
    println("getArg", os::getArg(argc, argv, 0).expect())  

    const path := os::getcwd()
    println("getcwd", path.expect().endsWith("ShnooTalk/stdlib/tests"))

    println("mkdir foobar", os::mkdir("foobar").__isNonZero__())
    println("chdir foobar", os::chdir("foobar").__isNonZero__())
    const path1 := os::getcwd()
    println("getcwd", path1.expect().endsWith("ShnooTalk/stdlib/tests/foobar"))
    println("chdir ..", os::chdir("..").__isNonZero__())
    const path2 := os::getcwd()
    println("getcwd", path2.expect().endsWith("ShnooTalk/stdlib/tests"))
    println("rmdir foobar", os::rmdir("foobar").__isNonZero__())
    println("mkdir foobar", os::mkdir("foobar").__isNonZero__())
    println("rmdir foobar", os::rmdir("foobar").__isNonZero__())

    println("getenv LLC_BIN", os::getEnv("PATH".string()).expect().length() > 0)
    println("getenv DOES_NOT_EXIST", os::getEnv("DOES_NOT_EXIST").hasValue())


    const sysTestCmd1 := "echo \"Hello world\"".string()
    const sysTest1 := os::system(sysTestCmd1).expect()
    println("system", sysTestCmd1)
    println(sysTest1.first, sysTest1.second)

    const sysTestCmd2 := "echo \"NANI\" && exit 1".string()
    const sysTest2 := os::system(sysTestCmd2).expect()
    println("system", sysTestCmd2)
    println(sysTest2.first, sysTest2.second)

    return 0
}