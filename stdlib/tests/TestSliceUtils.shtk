use "../stdlib/SliceUtils.shtk" as slice
from "../stdlib/Slice.shtk" use Slice

fn main() -> int
{
    println("search")

    var a := make(Slice[int], [5, 3, 4, 1, 2]) 

    println(slice::search[int](a, 5).expect())
    println(slice::search[int](a, 1).expect())
    println(slice::search[int](a, 4).expect())
    println(slice::search[int](a, 2).expect())
    println(slice::search[int](a, 10).isNone())

    println("binarySearch")

    var b := make(Slice[int], [1, 10, 23, 45, 67, 100])

    println(slice::binarySearch[int](b, 1).expect())
    println(slice::binarySearch[int](b, 45).expect())
    println(slice::binarySearch[int](b, 23).expect())
    println(slice::binarySearch[int](b, 100).expect())
    println(slice::binarySearch[int](b, 1223).isNone()) 

    println("count")

    var c := make(Slice[int], [1, 23, 45, 32, 34, 32, 32, 54, 32, 45])

    println(slice::count[int](c, 32))
    println(slice::count[int](c, 45))
    println(slice::count[int](c, 100))
    println(slice::count[int](c, 23))

    println("isEqual")

    println(slice::isEqual[int](a, b))
    println(slice::isEqual[int](a, a))

    println("sort")

    var d := make(Slice[int], [23, 64, 78, 34, 56, 87, 45, 67, 34, 879, 342, 674, 23, 6457, 23, 45, 45, 645, 54, 6])
    slice::sortInPlace[int](d)

    for var i: ulong = 0; i < 20; i += 1
        print(d[i]; ", ")

    println("")
    
    println("reverse")

    var e := make(Slice[int], [1, 2, 3, 4, 5])
    slice::reverseInPlace[int](e)

    for i = 0; i < 5; i += 1
        print(e[i]; ", ")

    return 0
}