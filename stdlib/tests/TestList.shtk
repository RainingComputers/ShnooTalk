from "../stdlib/List.shtk" use List
from "../stdlib/Slice.shtk" use Slice

fn printIntList(l: List[int])
{
    for i in l print(i; ", ")
    println("")
}

fn main() -> int
{
    const a := make(List[int], [1, 2, 3, 4])

    println("length", a.length())
    println("get", a.get(2).expect())
    println("get fail", a.get(10).isNone())
    println("subscriptItem", a[3])

    var b := a.slice()

    b.setItem(2, 100)
    println("slice", b[2], a[2])

    var c := a.clone()
    c.setItem(3, 100)
    println("clone", c[3], a[3])

    const d := make(Slice[int], [10, 20, 30, 40, 50])
    var e := make(List[int], d)
    e.setItem(3, 3)
    println("listFromSlice", e[3], d[3])

    var f := make(List[int], [1, 2, 3])
    printIntList(f)
    f += [4, 5, 6]
    printIntList(f)
    f += make(Slice[int], [7, 8, 9])
    printIntList(f)
    f += make(List[int], [10, 11, 12])
    printIntList(f)

    print("list range ")
    const g := make(List[int], [0, 1, 2, 3, 4, 5, 6, 7, 8])
    printIntList(g[[3, 7]])

    println("list append")
    var h := make(List[int], [0, 1, 2, 3])
    printIntList(h)
    h.append(4) h.append(5) h.append(6) h.append(7) h.append(8) h.append(9) h.append(10)
    printIntList(h)

    println("list pop")
    println(h.pop())
    printIntList(h)

    println("clear")
    h.clear()
    printIntList(h) 

    return 0
}