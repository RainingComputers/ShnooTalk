generic T

from "../stdlib/Swap.shtk" use swap
from "../stdlib/Optional.shtk" use Optional, some, none

fn _quickSortPartition(arr: T[], lo: ulong, hi: ulong) -> ulong
{
    # TODO add unsafe keyword, immutable pointer is being force casted to mutable pointer
    var a: T[] <- arr  

    var pivot := a[(hi + lo)/2]
    var left := lo - 1
    var right := hi + 1

    loop 
    {
        do left = left + 1 while a[left] < pivot
        do right = right - 1 while a[right] > pivot

        if left >= right return right

        swap[T](a[left], a[right])
    }

    return 0
}

fn _quickSort(arr: T[], lo: ulong, hi: ulong)
{
    if not (lo >= 0 and hi >= 0 and lo < hi)
        return void
    
    const p := _quickSortPartition(arr, lo, hi)
    _quickSort(arr, lo, p)
    _quickSort(arr, p + 1, hi)
}


fn sortInPlace(a: T[], n: ulong)
{
    _quickSort(a, 0, n - 1)
}

fn reverseInPlace(arr: T[], n: ulong)
{
    # TODO add unsafe keyword, immutable pointer is being force casted to mutable pointer
    var a: T[] <- arr  

    for var i: ulong = 0; i < (n/2); i += 1 
        swap[T](a[i], a[n-i-1])
}

fn search(arr: T[], n: ulong, item: T) -> Optional[ulong]
{
    for var i: ulong = 0; i < n; i += 1 
        if(arr[i] == item)
            return some(i)

    return none()
}

fn binarySearch(arr: T[], n: ulong, item: T) -> Optional[ulong]
{
    var left: ulong = 0
    var right: ulong = n - 1

    while left <= right
    {
        const mid := (left + right)/2
        
        if arr[mid] == item
            return some(mid)
        elif arr[mid] < item
            left = mid + 1
        else
            right = mid - 1
    }

    return none()
}

fn count(arr: T[], n: ulong, item: T) -> ulong
{
    var count: ulong = 0

    for var i: ulong = 0; i < n; i += 1
        if arr[i] == item
            count += 1

    return count
}

fn isEqual(a: T[], n: ulong, b: T[], p: ulong) -> bool
{
    if n != p
        return false

    for var i: ulong = 0; i < n; i += 1
        if a[i] != b[i]
            return false

    return true
}