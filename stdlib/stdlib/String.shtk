use "../stdlib/LibC.shtk" as libc
from "../stdlib/SharedPointer.shtk" use SharedPointer, allocateHeap

struct String
{
    var _sp: SharedPointer[char]
    var _length: ulong
}

fn string(charArray: char[]) -> String
{
    # charArray is assumed to be always null terminated, becuase the intended use
    # of this constructor is to call on string literals, const foo := string("Foobar").
    # Since the string literals are generated by the compiler, they always will be null
    # terminated. 
    # Do not pass char array coming from an external input or that is constructed.
    # This can be a potential linting rule for the static analyser

    var self: String

    const length := libc::strlen(charArray)
    const capacity := length*2 

    self._length = length
    self._sp = allocateHeap[char](capacity)
    self._sp.copy(charArray, length+1)

    return self
}

fn length(self: String) -> ulong
{
    return self._length
}

fn toCharArray(self: String) -> char[]
{
    return self._sp.slice().pointer()
}

