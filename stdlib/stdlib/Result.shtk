generic T, E

from "stdlib/Error.shtk" use Error, error, nil
from "stdlib/Panic.shtk" use panic

def EXPECT_ON_FAIL_RESULT "Called expect on a error result"

struct Result
{
    var item: T
    var error: Error[E]
}

fn ok(item: T) -> Result
{
    var self: Result
    self.item = item
    self.error = nil()
    return self
}

fn fail(error: E) -> Result
{
    var self: Result
    self.error = error(error)
    return self
}

fn failFrom(error: Error[E]) -> Result
{
    var self: Result
    self.error = error
    return self
}

fn hasValue(self: Result) -> bool
{
    return not self.error.__isNonZero__()
}

fn isFail(self: Result) -> bool
{
    return self.error.__isNonZero__()
}

fn expect(self: Result) -> T
{
    if self.error panic(EXPECT_ON_FAIL_RESULT, 1)

    return self.item
}

fn __bitwiseOrItem__(self: Result, other: T) -> T
{
    if not self.error return self.item

    return other
}

fn __bitwiseOrResult__(self: Result, other: Result) -> Result
{
    if not other.error return other
    return self
}

fn __questionMarkContinue__(self: Result) -> bool
{
    return self.hasValue()
}

fn __questionMarkUnwrap__(self: Result) -> T
{
    return self.item
}

fn __questionMarkError__(self: Result) -> Error[E]
{
    return self.error
}

fn __questionMarkConstruct__(error: Error[E]) -> Result
{
    return failFrom(error)
}