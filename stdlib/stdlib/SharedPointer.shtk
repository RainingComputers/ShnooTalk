generic T

from "../stdlib/ReferenceCounter.shtk" use ReferenceCounter, createCounter
from "../stdlib/Slice.shtk" use Slice, slice, allocateHeap

struct SharedPointer
{
    var _count: ReferenceCounter
    var _slice: Slice[T]
}

fn allocateHeap(capacity: ulong) -> SharedPointer
{
    var self: SharedPointer

    self._count = createCounter()
    self._slice = allocateHeap[T](capacity)

    return self
}

fn fromPreAllocated(buffer: T[], bufferLength: ulong) -> SharedPointer
{
    var self: SharedPointer

    self._count = createCounter()
    self._slice = slice[T](buffer, bufferLength)

    return self
}

fn expand(mut self: SharedPointer, capacity: ulong)
{
    self._slice.expand(capacity)
}

fn deconstructor(mut self: SharedPointer)
{
    if not self._count.isZero() return void
    self._slice.free()
}

fn subscriptItem(self: SharedPointer, index: ulong) -> T
{
    return self._slice[index]
}

fn setItem(mut self: SharedPointer, index: ulong, item: T)
{
    self._slice.setItem(index, item)
}

fn capacity(self: SharedPointer) -> ulong
{
    return self._slice.capacity()
}

fn slice(self: SharedPointer) -> Slice[T]
{
    return self._slice
}

fn copy(mut self: SharedPointer, items: T[], length: ulong)
{
    self._slice.copy(items, length)
}

fn copyOffset(mut self: SharedPointer, items: T[], length: ulong, offset: ulong)
{
    self._slice.copyOffset(items, length, offset)
}

fn pointer(self: SharedPointer) -> T[]
{
    return self._slice.pointer()
}