use "../stdlib/LibC.shtk" as libc

def PI 3.14159265358979323846264338327950288
def E 2.71828182845904523536

fn abs(x: double) -> double
{
    return libc::fabs(x)
}

fn absInt(x: int) -> int
{
    return libc::abs(x)
}

fn absLong(x: long) -> long
{
    return libc::labs(x)
}

fn ceil(x: double) -> double
{
    return libc::ceil(x)
}

fn ceilInt(x: double) -> int
{
    return int`libc::ceil(x)
}

fn ceilLong(x: double) -> long
{
    return long`libc::ceil(x)
}

fn floor(x: double) -> double
{
    return libc::floor(x)
}

fn floorInt(x: double) -> int
{
    return int`libc::floor(x)
}

fn floorLong(x: double) -> long
{
    return long`libc::floor(x)
}

fn exp(x: double) -> double
{
    return libc::exp(x)
}

fn log(x: double) -> double
{
    return libc::log(x)
}

fn sqrt(x: double) -> double
{
    return libc::sqrt(x)
}

fn pow(base: double, to: double) -> double
{
    return libc::pow(base, to)
}

fn degrees(angleRadians: double) -> double
{
    return angleRadians*(180.0/PI)
}

fn radians(angleDegrees: double) -> double
{
    return angleDegrees*(PI/180.0)
}

fn cos(x: double) -> double
{
    return libc::cos(x)
}

fn sin(x: double) -> double
{
    return libc::sin(x)
}

fn tan(x: double) -> double
{
    return libc::tan(x)
}

fn acos(x: double) -> double
{
    return libc::acos(x)
}

fn asin(x: double) -> double
{
    return libc::asin(x)
}

fn atan(x: double) -> double
{
    return libc::atan(x)
}
