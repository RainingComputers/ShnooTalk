use "../stdlib/LibC.shtk" as libc
from "../stdlib/Result.shtk" use Result, ok, fail
from "../stdlib/String.shtk" use String, string, stringFromPreAllocated
from "../stdlib/RawPointerUtils.shtk" use nullptrArray
from "../stdlib/ErrorTypes.shtk" use StdlibError, EOF, OSError
from "../stdlib/Error.shtk" use Error
from "../stdlib/_ErrorUtils.shtk" use _intToError

enum SeekType {
    SEEK_SET,
    SEEK_CUR,
    SEEK_END
}

struct File
{
    var libcFile: libc::FILE*
}

fn open(path: String, mode: String) -> Result[File, StdlibError]
{
    var self: File
    self.libcFile <- libc::fopen(path.toCharArray(), mode.toCharArray())

    if not addr( self.libcFile)
       return fail(OSError)

    return ok(self)
}

fn popen(command: String) -> Result[File, StdlibError]
{
    var self: File
    self.libcFile <- libc::popen(command.toCharArray(), "r")

    if not addr(self.libcFile)
        return fail(OSError)

    return ok(self)
}

fn readLine(self: File) -> Result[String, StdlibError]
{
    var buffer: char[] <- nullptrArray[char]()
    var bufferLength: ulong
    
    const length: long = libc::getline(buffer, bufferLength, self.libcFile)

    if length < 0 {
        if libc::feof(self.libcFile)
            return fail(EOF)

        return fail(OSError)
    }
        
    const line := stringFromPreAllocated(buffer, bufferLength, ulong`length)
    return ok(line)
}

fn read(self: File) -> Result[String, StdlibError]
{
    var contents := "".string()

    loop {
        const [line, error] := self.readLine()
        
        if error {
            if error == OSError
                return fail(OSError)
            
            break
        }

        contents += line
    }

    return ok(contents)
}

fn seek(self: File, offset: long, whence: SeekType) -> Error[StdlibError]
{
    return _intToError(libc::fseek(self.libcFile, offset, int`whence))
}

fn tell(self: File) -> Result[long, StdlibError]
{
    const pos := libc::ftell(self.libcFile)

    if pos < 0
        return fail(OSError)

    return ok(pos)
}

fn write(self: File, content: String) -> Error[StdlibError]
{
    return _intToError(libc::fputs(content.toCharArray(), self.libcFile))
}

fn close(mut self: File) -> Error[StdlibError]
{
    const err := _intToError(libc::fclose(self.libcFile))
    self.libcFile <- libc::FILE*`NULL  # TODO Fix bug in instantiator that prevents using RawPointerUtils.shtk

    return err
}

fn pclose(mut self: File) -> Result[int, StdlibError]
{
    const pcloseRet := libc::pclose(self.libcFile)
    self.libcFile <- libc::FILE*`NULL

    if pcloseRet < 0
        return fail(OSError)

    const exitCode := (pcloseRet & 0xff00) >> 8

    return ok(exitCode)
}

fn __deconstructor__(self: File)
{
    if (addr(self.libcFile))
        libc::fclose(self.libcFile)
}

fn readStringFromFile(path: String) -> Result[String, StdlibError]
{
    return open(path, "r")?.read()
}
