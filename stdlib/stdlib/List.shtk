generic T

from "stdlib/Optional.shtk" use Optional, some, none
from "stdlib/Panic.shtk" use panic
from "stdlib/RawPointerUtils.shtk" use malloc, realloc, free, addOffset, memcpy, memcpyOffset, nullptrArray
from "stdlib/ReferenceCounter.shtk" use ReferenceCounter, createCounter

def INVALID_RANGE "Invalid range for list range"
def NULL_POINTER_ERROR "Null pointer dereference error"
def OUT_OF_BOUNDS_ERROR "Index out of bounds error"

struct List
{
    var _count: ReferenceCounter
    var _ptr: T[]
    var _capacity: ulong
    var _length: ulong
}

fn allocateHeap(length: ulong) -> List
{
    const capacity := length*2 + 1

    var self: List

    self._count = createCounter()
    self._ptr <- malloc[T](capacity)
    self._capacity = capacity
    self._length = 0

    return self
}

fn list(items: T[], length: ulong) -> List
{
    var self: List = allocateHeap(length)
    
    memcpy[T](self._ptr, items, length)
    self._length = length

    return self
}

fn empptyList() -> List
{
    return allocateHeap(10)
}

fn fromPreAllocated(buffer: T[], capacity: ulong, length: ulong) -> List
{
    var self: List

    self._count = createCounter()
    self._ptr <- buffer
    self._capacity = capacity
    self._length = length

    return self
}

fn clone(self: List) -> List
{
    return list(self._ptr, self._length)
}

fn pointer(self: List) -> T[]
{
    return self._ptr
}

fn expand(mut self: List, capacity: ulong)
{
    self._ptr <- realloc[T](self._ptr, capacity)
    self._capacity = capacity
}

fn _incrementLength(mut self: List)
{
    if self._length == self._capacity
        self.expand(self._length*2)

    self._length += 1
}

fn append(mut self: List, item: T)
{
    self._incrementLength()
    self.setItem(self._length-1 , item)
}

fn appendArray(mut self: List, items: T[], length: ulong)
{
    const newLength := self._length + length

    if newLength >= self._capacity
        self.expand(newLength*2)

    memcpyOffset[T](self._ptr, items, length, self._length)
    
    self._length = newLength
}

fn remove(mut self: List, index: ulong) -> T
{
    self._validateIndex(index)
    
    const item := self._ptr[index]

    self._length -= 1

    const src: T[] <- addOffset[T](self._ptr, index+1)  # TODO test type hint
    const srcLength := self._length - index
    
    memcpyOffset[T](self._ptr, src, srcLength, index)

    return item
}

fn swapRemove(mut self: List, index: ulong) -> T
{
    self._validateIndex(index)

    const item := self._ptr[index]
    
    self._ptr[index] = self._ptr[self._length - 1]
    self._length -= 1

    return item
}

fn last(self: List) -> Optional[T]
{
    if self._length <= 0
        return none()

    return some(self._ptr[self._length-1])
}

fn clear(mut self: List)
{
    self._length = 0
}

fn pop(mut self: List) -> Optional[T]
{
    if self._length == 0
        return none()

    const item := self[self._length-1]
    self._length -= 1
    return some(item)
}

fn length(self: List) -> ulong
{
    return self._length
}

fn isEmpty(self: List) -> bool
{
    return self._length == 0
}

fn capacity(self: List) -> ulong
{
    return self._capacity
}

fn get(self: List, index: ulong) -> Optional[T]
{
    if index < self._length
        return some(self._ptr[index])

    return none()
}

fn _validateIndex(self: List, index: ulong) 
{
    if not addr(self._ptr)
        panic(NULL_POINTER_ERROR, 1)
    
    if index >= self._length
        panic(OUT_OF_BOUNDS_ERROR, 1)
}

fn setItem(mut self: List, index: ulong, item: T)
{
    self._validateIndex(index)
    self._ptr[index] = item
}

fn insert(mut self: List, index: ulong, item: T)
{
    self._validateIndex(index)
    self._incrementLength()
    
    const src: T[] <- addOffset[T](self._ptr, index)
    const srcLength := self._length - index - 1
    
    memcpyOffset[T](self._ptr, src, srcLength, index+1)
    self._ptr[index] = item
}

fn __subscriptItem__(self: List, index: ulong) -> T
{
    # TODO support negetive indices?

    self._validateIndex(index)
    return self._ptr[index]
}

fn __subscriptRange__(self: List, range: ulong[2]) -> List
{
    if range[0] > range[1]
        panic(INVALID_RANGE, 1)

    if range[1] > self._length
        panic(INVALID_RANGE, 1)

    return list(addOffset[T](self.pointer(), range[0]), range[1] - range[0])
}

fn __addArray__(self: List, other: T[], otherLength: ulong) -> List
{
    var new := self.clone()
    new.appendArray(other, otherLength)
    return new
}

fn __add__(self: List, other: List) -> List
{
    var new := self.clone()
    new.appendArray(other.pointer(), other.length())
    return new
}

fn _free(mut self: List)
{
    if not addr(self._ptr) 
        return void

    for var i: ulong = 0; i < self._length; i += 1 
        self._ptr[i].__deconstructor__()

    free[T](self._ptr)
    self._ptr <- nullptrArray[T]()
}

fn __deconstructor__(mut self: List)
{
    if not self._count.isZero() return void

    self._free()
}

# TODO add __in__ operator