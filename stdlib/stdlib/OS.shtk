use "../stdlib/LibC.shtk" as libc
from "../stdlib/File.shtk" use File
from "../stdlib/Panic.shtk" use panic
from "../stdlib/String.shtk" use String, string, stringFromPreAllocated
from "../stdlib/Pair.shtk" use Pair, pair
from "../stdlib/Triple.shtk" use Triple, triple
from "../stdlib/Result.shtk" use Result, fail, failFrom, ok
from "../stdlib/Optional.shtk" use Optional, none, some
from "../stdlib/RawPointerUtils.shtk" use nullptrArray
from "../stdlib/Error.shtk" use Error
from "../stdlib/ErrorTypes.shtk" use StdlibError, OSError
from "../stdlib/_ErrorUtils.shtk" use _intToError

fn getArg(argc: int, argv: ulong[], idx: int) -> Optional[String]
{
    if idx > argc
        return none()

    const arg: char[] <- char[]`(argv[idx] + 0)
    const length := libc::strlen(arg)

    return some(string(arg, length+1))
}

fn panicString(message: String, status: int)
{
    panic(message.toCharArray(), status)
}

fn _popen(command: String) -> Result[File, StdlibError]
{
    var file: File
    file.libcFile <- libc::popen(command.toCharArray(), "r")

    if not addr(file.libcFile)
        return fail(OSError)

    return ok(file)
}

fn system(command: String) -> Result[Pair[String, int], StdlibError]
{
    const [file, err1] := _popen(command)

    if err1
        return failFrom(err1)
    
    const [output, err2] := file.read()

    if err2
        return failFrom(err2)

    const pcloseRet := libc::pclose(file.libcFile)

    if pcloseRet < 0
        return fail(OSError)

    const exitCode := (pcloseRet & 0xff00) >> 8

    return ok(pair(output, exitCode))
}

fn getEnv(key: String) -> Optional[String]
{
    const valPtr: char[] <- libc::getenv(key.toCharArray())
    
    if not addr(valPtr)
        return none()
    
    const length := libc::strlen(valPtr)

    const val := string(valPtr, length+1)

    return some(val)
}

fn getcwd() -> Optional[String]
{
    const charArray: char[] <- libc::getcwd(nullptrArray[char](), 0) 

    if not addr(charArray)
        return none()

    const length := libc::strlen(charArray)

    return some(stringFromPreAllocated(charArray, length+1, length))
}


fn chdir(path: String) -> Error[StdlibError]
{
    return _intToError(libc::chdir(path.toCharArray()))
}

fn mkdir(path: String) -> Error[StdlibError]
{
    return _intToError(
        libc::mkdir(path.toCharArray(),
        libc::S_IRWXU | libc::S_IRWXG | libc::S_IROTH | libc::S_IXOTH)
    )
}

fn rmdir(path: String) -> Error[StdlibError]
{
    return _intToError(libc::rmdir(path.toCharArray()))
}

fn rm(path: String) -> Error[StdlibError]
{
    return _intToError(libc::remove(path.toCharArray()))
}