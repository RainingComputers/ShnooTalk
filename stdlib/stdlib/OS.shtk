use "../stdlib/LibC.shtk" as libc
from "../stdlib/Panic.shtk" use panic
from "../stdlib/String.shtk" use String, string, stringFromPreAllocated
from "../stdlib/Pair.shtk" use Pair, pair
from "../stdlib/Triple.shtk" use Triple, triple
from "../stdlib/Optional.shtk" use Optional, none, some
from "../stdlib/RawPointerUtils.shtk" use nullptrArray


fn getArg(argv: ulong[], idx: int) -> char[]
{
    # TODO change to String
    return char[]`(argv[idx] + 0)
}

fn panicString(message: String, status: int)
{
    panic(message.toCharArray(), status)
}

fn system(command: String) -> Pair[String, int]
{
    # TODO
    return pair[String, int]("".string(), 0)
}

fn systemWithTimeout(command: String, milliseconds: uint) -> Triple[String, int, bool]
{
    # TODO
    return triple[String, int, bool]("".string(), 0, false)
}

fn getEnv(key: String) -> Optional[String]
{
    # TODO
    return none[String]()
}

fn getcwd() -> Optional[String]
{
    const charArray: char[] <- libc::getcwd(nullptrArray[char](), 0) 

    if not addr(charArray)
        return none[String]()

    const length := libc::strlen(charArray)

    return some[String](stringFromPreAllocated(charArray, length+1, length))
}

fn chdir(path: String) -> bool
{
    return libc::chdir(path.toCharArray()) < 0
}

fn mkdir(path: String) -> bool
{
    return libc::mkdir(path.toCharArray(), libc::S_IRWXU | libc::S_IRWXG | libc::S_IROTH | libc::S_IXOTH) < 0
}

fn rmdir(path: String) -> bool
{
    return libc::rmdir(path.toCharArray()) < 0
}

fn rm(path: String) -> bool
{
    return libc::remove(path.toCharArray()) < 0
}