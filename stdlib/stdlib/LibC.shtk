def S_ISUID 04000
def S_ISGID 02000
def S_ISVTX 01000
def S_IRUSR 0400
def S_IWUSR 0200
def S_IXUSR 0100
def S_IRWXU 0700
def S_IRGRP 0040
def S_IWGRP 0020
def S_IXGRP 0010
def S_IRWXG 0070
def S_IROTH 0004
def S_IWOTH 0002
def S_IXOTH 0001
def S_IRWXO 0007
def EOF -1

struct FILE {}

extfn malloc(bytes: ulong) -> ubyte[]
extfn realloc(ptr: ubyte[], size: ulong) -> ubyte[]
extfn free(ptr: ubyte*)
extfn memcpy(dest: ubyte[], src: ubyte[], length: ulong)

extfn exit(status: int)

extfn fabs(x: double) -> double
extfn abs(x: int) -> int
extfn labs(x: long) -> long

extfn ceil(x: double) -> double
extfn floor(x: double) -> double

extfn exp(x: double) -> double
extfn log(x: double) -> double

extfn sqrt(x: double) -> double
extfn pow(base: double, to: double) -> double

extfn cos(x: double) -> double
extfn sin(x: double) -> double
extfn tan(x: double) -> double
extfn acos(x: double) -> double
extfn asin(x: double) -> double
extfn atan(x: double) -> double

extfn time(t: long*) -> long
extfn usleep(us: int) -> int

extfn strcmp(lhs: char[], rhs: char[]) -> int
extfn strlen(str: char[]) -> ulong
extfn atoi(str: char[]) -> int
extfn atol(str: char[]) -> long
extfn atof(str: char[]) -> double

extfn arc4random_uniform(limit: uint) -> uint

extfn getcwd(buf: char[], size: ulong) -> char[]
extfn chdir(path: char[]) -> int
extfn mkdir(path: char[], mode: int) -> int
extfn rmdir(path: char[]) -> int
extfn remove(path: char[]) -> int

extfn fopen(path: char[], mode: char[]) -> FILE*
extfn fclose(file: FILE*) -> int
extfn getline(mut buffer: char[], mut bufferLength: ulong, file: FILE*) -> long
extfn fseek(file: FILE*, offset: long, whence: int) -> int
extfn ftell(file: FILE*) -> long
extfn fputs(content: char[], file: FILE*) -> int
extfn feof(file: FILE*) -> int
extfn getchar() -> int

