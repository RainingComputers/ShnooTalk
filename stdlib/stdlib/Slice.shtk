generic T

use "../stdlib/LibC.shtk" as libc
from "../stdlib/OS.shtk" use panic

def OUT_OF_BOUNDS_ERROR "Index out of bounds error"
def NULL_POINTER_ERROR "Null pointer dereference error"

struct Slice
{
    var _ptr: T[]
    var _length: ulong
}

fn slice(ptr: T[], length: ulong) -> Slice
{
    var self: Slice
    self._ptr <- ptr
    self._length = length
    return self
}

fn allocateHeap(length: ulong) -> Slice
{
    return slice(T[]`libc::malloc(sizeof(T)*length), length)
}

fn free(self: Slice)
{
    libc::free(ubyte*`self._ptr)
}

fn validateIndex(self: Slice, index: ulong) 
{
    if addr(self._ptr) == 0
        panic(OUT_OF_BOUNDS_ERROR, 1)
    
    if index >= self._length
        panic(NULL_POINTER_ERROR, 1)
}

fn subscriptItem(self: Slice, index: ulong) -> T
{
    self.validateIndex(index)

    return self._ptr[index]
}

fn setItem(mut self: Slice, index: ulong, item: T)
{
    self.validateIndex(index)

    self._ptr[index] = item
}

fn length(self: Slice) -> ulong
{
    return self._length
}