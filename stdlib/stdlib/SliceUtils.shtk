generic T

use "../stdlib/ArrayUtils.shtk" as array

from "../stdlib/Slice.shtk" use Slice
from "../stdlib/Optional.shtk" use Optional, some, none


fn sortInPlace(s: Slice[T])
{
    array::sortInPlace[int](s.pointer(), s.capacity())
}

fn reverseInPlace(s: Slice[T])
{
    array::reverseInPlace[int](s.pointer(), s.capacity())
}

fn search(s: Slice[T], item: T) -> Optional[ulong]
{
    return array::search[int](s.pointer(), s.capacity(), item)
}

fn binarySearch(s: Slice[T], item: T) -> Optional[ulong]
{
    return array::binarySearch[int](s.pointer(), s.capacity(), item)
}

fn count(s: Slice[T], item: T) -> ulong
{
    return array::count[int](s.pointer(), s.capacity(), item)
}

fn isEqual(a: Slice[T], b: Slice[T]) -> bool
{
    return array::isEqual[int](a.pointer(), a.capacity(), b.pointer(), b.capacity())
}