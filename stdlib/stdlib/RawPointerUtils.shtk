generic T

use "../stdlib/LibC.shtk" as libc
from "../stdlib/Panic.shtk" use panic

def UNABLE_TO_MALLOC "Unable to allocate memory"

fn addOffset(ptr: T[], offset: ulong) -> T[]
{
    return T[]`(addr(ptr) + offset*sizeof(T))
}

fn memcpy(dest: T[], src: T[], length: ulong)
{
    libc::memcpy(ubyte[]`dest, ubyte[]`src, length*sizeof(T))
}

fn memcpyOffset(dest: T[], src: T[], length: ulong, offset: ulong)
{
    libc::memcpy(ubyte[]`(addOffset(dest, offset)), ubyte[]`src, length*sizeof(T))
}

fn malloc(length: ulong) -> T[]
{
    const ptr: T[] <- T[]`libc::malloc(sizeof(T)*length)

    if not addr(ptr)
        panic(UNABLE_TO_MALLOC, 1)

    return ptr
}

fn realloc(ptr: T[], size: ulong) -> T[]
{
    const newPtr: T[] <- T[]`libc::realloc(ubyte[]`ptr, size)

    if not addr(newPtr)
        panic(UNABLE_TO_MALLOC, 1)

    return newPtr
}

fn free(ptr: T[])
{
    libc::free(ubyte*`ptr)
}

fn nullptrArray() -> T[]
{
    return T[]`0
}

fn nullptr() -> T*
{
    return T*`0
}
