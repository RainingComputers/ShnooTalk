generic T

from "../stdlib/Panic.shtk" use panic

def EXPECT_ON_NONE_OPTIONAL "Called expect on a none optional"

struct Optional
{
    var item: T
    var none: bool
}

fn some(item: T) -> Optional
{
    var self: Optional
    self.item = item
    self.none = false
    return self
}

fn none() -> Optional
{
    var self: Optional
    self.none = true
    return self
}

fn hasValue(self: Optional) -> bool
{
    return not self.none
}

fn isNone(self: Optional) -> bool
{
    return self.none
}

fn expect(self: Optional) -> T
{
    if self.none panic(EXPECT_ON_NONE_OPTIONAL, 1)

    return self.item
}

fn __bitwiseOrItem__(self: Optional, other: T) -> T
{
    if not self.none return self.item

    return other
}

fn __bitwiseOrOptional__(self: Optional, other: Optional) -> Optional
{
    if not other.none return other
    return self
}

fn __questionMarkContinue__(self: Optional) -> bool
{
    return self.hasValue()
}

fn __questionMarkUnwrap__(self: Optional) -> T
{
    return self.item
}

fn __questionMarkError__(self: Optional) -> bool
{
    return self.none
}

fn __questionMarkConstruct__() -> Optional
{
    return none()
}