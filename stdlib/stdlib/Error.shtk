generic E

from "../stdlib/Panic.shtk" use panic

def EXPECT_ON_NON_NIL_ERROR "Called expect on error that is not nil"

struct Error
{
    var _error: E
    var _nil: bool
}

fn nil() -> Error
{
    var self: Error
    self._nil = true
    return self
}

fn error(error: E) -> Error
{
    var self: Error
    self._error = error
    self._nil = false
    return self
}

fn isNonZero(self: Error) -> bool
{
    return not self._nil
}

fn isNil(self: Error) -> bool
{
    return self._nil
}

fn getError(self: Error) -> E
{
    return self._error
}

fn isEqual(self: Error, other: E) -> bool
{
    if self
        return self._error == other

    return false
}

fn expect(self: Error) 
{
    if self
        panic(EXPECT_ON_NON_NIL_ERROR, 1)
}